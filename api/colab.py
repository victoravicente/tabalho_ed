# -*- coding: utf-8 -*-
"""CÃ³pia de facenet_embedding.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12F2BJfbV_wpANTtrxFnuPqOa_w77SZRS

---

#Extrair e preparar a base de dados
"""

!pip install deepface

from google.colab import drive
drive.mount('/content/drive')

import tarfile
import os
import pandas as pd
from PIL import Image

tgz_file_path = '../content/drive/MyDrive/lfw-funneled.tgz'
extract_dir = './data'
os.makedirs(extract_dir, exist_ok=True)

try:
    with tarfile.open(tgz_file_path, 'r:gz') as tar:
        tar.extractall(path=extract_dir)
    print(f"Extracted {tgz_file_path} to {extract_dir}")
except tarfile.TarError as e:
    print(f"Error extracting {tgz_file_path}: {e}")

import os
import pandas as pd
from PIL import Image
path = '../content/data/lfw_funneled'


person_names = []
image_paths = []


image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff'}

print(f"Processing subfolders in {path}...")


for person_folder in os.listdir(path):
    person_folder_path = os.path.join(path, person_folder)


    if os.path.isdir(person_folder_path):

        files = os.listdir(person_folder_path)


        image_file = None
        for file in files:
            if os.path.splitext(file)[1].lower() in image_extensions:
                image_file = file
                break


        if image_file:
            image_path = os.path.join(person_folder_path, image_file)
            person_names.append(person_folder)
            image_paths.append(image_path)


df_people_images = pd.DataFrame({
    'person_name': person_names,
    'image_path': image_paths
})

print(f"Found images for {len(df_people_images)} people.")

df_people_images

image_paths = df_people_images['image_path'].head(3)
person_names_list = []
embeddings_list = []
for i, img_path in enumerate(image_paths):
  current_person_name = df_people_images['person_name'].iloc[i]
  try:
    emb = DeepFace.represent(img_path=img_path, model_name = 'Facenet')
    embedding_values = emb[0]['embedding']
    person_names_list.append(current_person_name)
    embeddings_list.append(embedding_values)
  except Exception as e:
    try:
      emb = DeepFace.represent(img_path=img_path, model_name = 'VGG-Face')
      embedding_values = emb[0]['embedding']
      person_names_list.append(current_person_name)
      embeddings_list.append(embedding_values)
    except Exception as e2:
      person_names_list.append(current_person_name)
      embeddings_list.append(None)
df_emb_final = pd.DataFrame({
    'person_name': person_names_list,
    'emb': embeddings_list
})
df_emb_final.show()

df_emb_final.to_parquet('embeddings.parquet')
    
